{"version":3,"file":"Input.js","sourceRoot":"","sources":["../../../../../../../../../Projects/VPS/lastvp/VPlab5/app/components/input/Input.tsx"],"names":[],"mappings":";AAAA,OAAc,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AACxC,OAAO,MAAM,MAAM,oBAAoB,CAAC;AAaxC,MAAM,KAAK,GAAyB,CAAC,EACrC,KAAK,EACL,KAAK,EACL,UAAU,EACV,QAAQ,GAAG,KAAK,EAChB,WAAW,EACX,KAAK,EACL,QAAQ,EACR,IAAI,GAAG,MAAM,GAAE,EAAE,EAAE;IACjB,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;IAElD,MAAM,YAAY,GAAG,CAAC,CAAsC,EAAE,EAAE;QAC9D,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC,CAAC;IAEF,MAAM,cAAc,GAAG;QACrB,MAAM,CAAC,YAAY;QACnB,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;QACzB,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;KAChC;SACE,MAAM,CAAC,OAAO,CAAC;SACf,IAAI,CAAC,GAAG,CAAC,CAAC;IAEb,OAAO,CACL,eAAK,SAAS,EAAE,MAAM,CAAC,SAAS,aAC7B,KAAK,IAAI,CACR,iBAAO,SAAS,EAAE,MAAM,CAAC,KAAK,aAC3B,KAAK,EACL,QAAQ,IAAI,eAAM,SAAS,EAAE,MAAM,CAAC,QAAQ,kBAAU,IACjD,CACT,EACD,cAAK,SAAS,EAAE,cAAc,YAC5B,gBACE,SAAS,EAAE,MAAM,CAAC,KAAK,EACvB,IAAI,EAAE,IAAI,EACV,WAAW,EAAE,WAAW,EACxB,KAAK,EAAE,KAAK,EACZ,QAAQ,EAAE,YAAY,EACtB,OAAO,EAAE,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,EACjC,MAAM,EAAE,GAAG,EAAE,CAAC,YAAY,CAAC,KAAK,CAAC,GACjC,GACE,EACL,KAAK,IAAI,cAAK,SAAS,EAAE,MAAM,CAAC,YAAY,YAAG,KAAK,GAAO,EAC3D,UAAU,IAAI,CAAC,KAAK,IAAI,CACvB,cAAK,SAAS,EAAE,MAAM,CAAC,UAAU,YAAG,UAAU,GAAO,CACtD,IACG,CACP,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,KAAK,CAAC","sourcesContent":["import React, { useState } from 'react';\r\nimport styles from './Input.module.css';\r\n\r\nexport interface InputProps {\r\n  label?: string;\r\n  error?: string;\r\n  helperText?: string;\r\n  required?: boolean;\r\n  placeholder?: string;\r\n  value: string;\r\n  onChange: (value: string) => void;\r\n  type?: 'text' | 'password' | 'email';\r\n}\r\n\r\nconst Input: React.FC<InputProps> = ({\r\nlabel,\r\nerror,\r\nhelperText,\r\nrequired = false,\r\nplaceholder,\r\nvalue,\r\nonChange,\r\ntype = 'text',}) => {\r\n  const [isFocused, setIsFocused] = useState(false);\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    onChange(e.target.value);\r\n  };\r\n\r\n  const wrapperClasses = [\r\n    styles.inputWrapper,\r\n    error ? styles.error : '',\r\n    isFocused ? styles.focused : '',\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      {label && (\r\n        <label className={styles.label}>\r\n          {label}\r\n          {required && <span className={styles.required}>*</span>}\r\n        </label>\r\n      )}\r\n      <div className={wrapperClasses}>\r\n        <input\r\n          className={styles.input}\r\n          type={type}\r\n          placeholder={placeholder}\r\n          value={value}\r\n          onChange={handleChange}\r\n          onFocus={() => setIsFocused(true)}\r\n          onBlur={() => setIsFocused(false)}\r\n        />\r\n      </div>\r\n      {error && <div className={styles.errorMessage}>{error}</div>}\r\n      {helperText && !error && (\r\n        <div className={styles.helperText}>{helperText}</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;"]}