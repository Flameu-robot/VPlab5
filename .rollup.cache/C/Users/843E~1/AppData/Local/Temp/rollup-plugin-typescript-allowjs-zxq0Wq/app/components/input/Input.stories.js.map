{"version":3,"file":"Input.stories.js","sourceRoot":"","sources":["../../../../../../../../../Projects/VPS/lastvp/VPlab5/app/components/input/Input.stories.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { Meta, StoryObj } from '@storybook/react';\r\nimport Input from './Input';\r\n\r\nconst meta: Meta<typeof Input> = {\r\n  title: 'Components/Input',\r\n  component: Input,\r\n  parameters: {\r\n    layout: 'padded',\r\n    docs: {\r\n      description: {\r\n        component: 'Компонент поля ввода с поддержкой меток, ошибок, вспомогательного текста и различных типов ввода.',\r\n      },\r\n    },\r\n  },\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    type: {\r\n      control: { type: 'select' },\r\n      options: ['text', 'password', 'email'],\r\n      description: 'Тип поля ввода',\r\n    },\r\n    required: {\r\n      control: { type: 'boolean' },\r\n      description: 'Обязательное поле',\r\n    },\r\n    label: {\r\n      control: { type: 'text' },\r\n      description: 'Метка поля',\r\n    },\r\n    error: {\r\n      control: { type: 'text' },\r\n      description: 'Текст ошибки',\r\n    },\r\n    helperText: {\r\n      control: { type: 'text' },\r\n      description: 'Вспомогательный текст',\r\n    },\r\n    placeholder: {\r\n      control: { type: 'text' },\r\n      description: 'Подсказка в поле',\r\n    },\r\n    onChange: {\r\n      action: 'changed',\r\n      description: 'Обработчик изменения значения',\r\n    },\r\n  },\r\n};\r\n\r\nexport default meta;\r\ntype Story = StoryObj<typeof Input>;\r\n\r\nexport const Default: Story = {\r\n  args: {\r\n    placeholder: 'Введите текст...',\r\n    value: '',\r\n  },\r\n};\r\n\r\nexport const WithLabel: Story = {\r\n  args: {\r\n    label: 'Имя пользователя',\r\n    placeholder: 'Введите ваше имя',\r\n    value: '',\r\n  },\r\n};\r\n\r\nexport const Required: Story = {\r\n  args: {\r\n    label: 'Обязательное поле',\r\n    value: '',\r\n    required: true,\r\n  },\r\n};\r\n\r\nexport const WithError: Story = {\r\n  args: {\r\n    label: 'Email',\r\n    value: 'invalid-email',\r\n    error: 'Введите корректный email адрес',\r\n  },\r\n};\r\n\r\nexport const WithHelperText: Story = {\r\n  args: {\r\n    label: 'Телефон',\r\n    value: '',\r\n    helperText: 'В формате +7 (XXX) XXX-XX-XX',\r\n  },\r\n};\r\n\r\nexport const Password: Story = {\r\n  args: {\r\n    label: 'Пароль',\r\n    type: 'password',\r\n    value: '',\r\n    placeholder: 'Введите пароль',\r\n  },\r\n};\r\n\r\nexport const Email: Story = {\r\n  args: {\r\n    label: 'Email',\r\n    type: 'email',\r\n    value: '',\r\n    placeholder: 'example@mail.com',\r\n  },\r\n};\r\n\r\nexport const AllStates: Story = {\r\n  render: () => (\r\n    <div style={{ display: 'flex', flexDirection: 'column', gap: '20px', maxWidth: '300px' }}>\r\n      <Input\r\n        label=\"Обычное поле\"\r\n        placeholder=\"Введите текст\"\r\n        value=\"\"\r\n        onChange={() => {}}\r\n      />\r\n      <Input\r\n        label=\"Обязательное поле\"\r\n        value=\"\"\r\n        required\r\n        onChange={() => {}}\r\n      />\r\n      <Input\r\n        label=\"Поле с ошибкой\"\r\n        value=\"неправильное значение\"\r\n        error=\"Это поле содержит ошибку\"\r\n        onChange={() => {}}\r\n      />\r\n      <Input\r\n        label=\"Поле с подсказкой\"\r\n        value=\"\"\r\n        helperText=\"Это вспомогательный текст\"\r\n        onChange={() => {}}\r\n      />\r\n    </div>\r\n  ),\r\n};\r\n\r\nexport const AllTypes: Story = {\r\n  render: () => (\r\n    <div style={{ display: 'flex', flexDirection: 'column', gap: '15px', maxWidth: '300px' }}>\r\n      <Input\r\n        label=\"Текст\"\r\n        value=\"\"\r\n        type=\"text\"\r\n        placeholder=\"Обычный текст\"\r\n        onChange={() => {}}\r\n      />\r\n      <Input\r\n        label=\"Пароль\"\r\n        value=\"\"\r\n        type=\"password\"\r\n        placeholder=\"Введите пароль\"\r\n        onChange={() => {}}\r\n      />\r\n      <Input\r\n        label=\"Email\"\r\n        value=\"\"\r\n        type=\"email\"\r\n        placeholder=\"example@mail.com\"\r\n        onChange={() => {}}\r\n      />\r\n    </div>\r\n  ),\r\n};"]}